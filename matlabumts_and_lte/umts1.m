clear all;
fprintf(1,'Loading samples...\n');
f=fopen('C:\\temp\\telstra-umts4-4412-CH.usrp', 'rb'); v=fread(f, inf, 'short'); cv_usrp=v(2:2:end)+v(1:2:end)*j; fclose(f);
clear v;
%f=fopen('C:\temp\dab_mode1_basicrx_2msps.trunc.cf', 'rb'); v=fread(f, inf, 'int'); cv_usrp=v(1:2:end)+v(2:2:end)*j; fclose(f);


fs = 4e6;
cv_usrp = cv_usrp';
%plot ([1:length(cv_usrp)]/fs, abs(cv_usrp))

t = 0:1/fs:length(cv_usrp)/fs-1/fs;

cv_usrp = cv_usrp .* exp(j*2*pi*(-1643-2550-309+1660+175)*t);

cv_usrp = resample(cv_usrp, 24,25);



N_corr_samples = 38400*20;

%PSC

a = [1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1 ];
Cpsc = (1+j) * [ a, a, a, -a, -a, a, -a, -a, a, a, a, -a, a, -a, a, a ];

%SSC 

b=[a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), -a(9), -a(10), -a(11), -a(12), -a(13), -a(14), -a(15),  -a(16) ];

z =  [b, b, b, -b, b, b, -b, -b, b, -b, b, -b, -b, -b, -b, -b];

H = cell(1,9);

%compute the hadamard matrix
H(1) = {[1]};
for k=2:9
    H(k) = {[cell2mat(H(k-1)) cell2mat(H(k-1)) ; cell2mat(H(k-1)) -cell2mat(H(k-1))]};
end

Hs = cell2mat(H(9));

%Hm = Hs(1+0:16:256,:); %every 16th row starting from 1st row

for i=1:16,
    Cssc(i,:) = (1+j) * Hs(1+(i-1)*16,:) .* z;
end

fprintf(1,'Correlating PSC...\n');
%attempt to correlate PSC
corr = zeros(1,N_corr_samples);
corr_diff = zeros(1,N_corr_samples*2);

for (i=1:N_corr_samples)
    corr(i) = sum( conj(Cpsc(1:256)) .* cv_usrp(i:i+255) ) ;
    %+ abs(sum( conj(Cpsc(129:256)) .* cv_usrp(38400+i+128:38400+i+255) )).^2 ;
    %corr_diff(i) = ...
     %     abs(sum( conj(Cpsc(1:64)) .* cv_usrp(38400+i:38400+i+63) )).^2 ;%s...
       % + abs(sum( conj(Cpsc(65:128)) .* cv_usrp(38400+i+64:38400+i+127) )).^2 ...
       % + abs(sum( conj(Cpsc(129:192)) .* cv_usrp(38400+i+128:38400+i+191) )).^2 ...
       % + abs(sum( conj(Cpsc(193:256)) .* cv_usrp(38400+i+192:38400+i+255) )).^2;
end
%figure(1)
plot([1:N_corr_samples], abs(corr).^2)



%slot_sample = 14129; %adj%
slot_sample = 23691;

%attempt to correlate SSC

scorr = zeros(1,15);

ssc_seq = [
    [1,1,2,8,9,10,15,8,10,16,2,7,15,7,16]        
[1,1,5,16,7,3,14,16,3,10,5,12,14,12,10]      
[1,2,1,15,5,5,12,16,6,11,2,16,11,15,12]      
[1,2,3,1,8,6,5,2,5,8,4,4,6,3,7]              
[1,2,16,6,6,11,15,5,12,1,15,12,16,11,2]      
[1,3,4,7,4,1,5,5,3,6,2,8,7,6,8]              
[1,4,11,3,4,10,9,2,11,2,10,12,12,9,3]        
[1,5,6,6,14,9,10,2,13,9,2,5,14,1,13]         
[1,6,10,10,4,11,7,13,16,11,13,6,4,1,16]      
[1,6,13,2,14,2,6,5,5,13,10,9,1,14,10]        
[1,7,8,5,7,2,4,3,8,3,2,6,6,4,5]              
[1,7,10,9,16,7,9,15,1,8,16,8,15,2,2]         
[1,8,12,9,9,4,13,16,5,1,13,5,12,4,8]         
[1,8,14,10,14,1,15,15,8,5,11,4,10,5,4]       
[1,9,2,15,15,16,10,7,8,1,10,8,2,16,9]        
[1,9,15,6,16,2,13,14,10,11,7,4,5,12,3]       
[1,10,9,11,15,7,6,4,16,5,2,12,13,3,14]       
[1,11,14,4,13,2,9,10,12,16,8,5,3,15,6]       
[1,12,12,13,14,7,2,8,14,2,1,13,11,8,11]      
[1,12,15,5,4,14,3,16,7,8,6,2,10,11,13]       
[1,15,4,3,7,6,10,13,12,5,14,16,8,2,11]       
[1,16,3,12,11,9,13,5,8,2,14,7,4,10,15]       
[2,2,5,10,16,11,3,10,11,8,5,13,3,13,8]       
[2,2,12,3,15,5,8,3,5,14,12,9,8,9,14]         
[2,3,6,16,12,16,3,13,13,6,7,9,2,12,7]        
[2,3,8,2,9,15,14,3,14,9,5,5,15,8,12]         
[2,4,7,9,5,4,9,11,2,14,5,14,11,16,16]        
[2,4,13,12,12,7,15,10,5,2,15,5,13,7,4]       
[2,5,9,9,3,12,8,14,15,12,14,5,3,2,15]        
[2,5,11,7,2,11,9,4,16,7,16,9,14,14,4]        
[2,6,2,13,3,3,12,9,7,16,6,9,16,13,12]        
[2,6,9,7,7,16,13,3,12,2,13,12,9,16,6]        
[2,7,12,15,2,12,4,10,13,15,13,4,5,5,10]      
[2,7,14,16,5,9,2,9,16,11,11,5,7,4,14]        
[2,8,5,12,5,2,14,14,8,15,3,9,12,15,9]        
[2,9,13,4,2,13,8,11,6,4,6,8,15,15,11]        
[2,10,3,2,13,16,8,10,8,13,11,11,16,3,5]      
[2,11,15,3,11,6,14,10,15,10,6,7,7,14,3]      
[2,16,4,5,16,14,7,11,4,11,14,9,9,7,5]        
[3,3,4,6,11,12,13,6,12,14,4,5,13,5,14]       
[3,3,6,5,16,9,15,5,9,10,6,4,15,4,10]         
[3,4,5,14,4,6,12,13,5,13,6,11,11,12,14]      
[3,4,9,16,10,4,16,15,3,5,10,5,15,6,6]        
[3,4,16,10,5,10,4,9,9,16,15,6,3,5,15]        
[3,5,12,11,14,5,11,13,3,6,14,6,13,4,4]       
[3,6,4,10,6,5,9,15,4,15,5,16,16,9,10]        
[3,7,8,8,16,11,12,4,15,11,4,7,16,3,15]       
[3,7,16,11,4,15,3,15,11,12,12,4,7,8,16]      
[3,8,7,15,4,8,15,12,3,16,4,16,12,11,11]      
[3,8,15,4,16,4,8,7,7,15,12,11,3,16,12]       
[3,10,10,15,16,5,4,6,16,4,3,15,9,6,9]        
[3,13,11,5,4,12,4,11,6,6,5,3,14,13,12]       
[3,14,7,9,14,10,13,8,7,8,10,4,4,13,9]        
[5,5,8,14,16,13,6,14,13,7,8,15,6,15,7]       
[5,6,11,7,10,8,5,8,7,12,12,10,6,9,11]        
[5,6,13,8,13,5,7,7,6,16,14,15,8,16,15       ]
[5,7,9,10,7,11,6,12,9,12,11,8,8,6,10        ]
[5,9,6,8,10,9,8,12,5,11,10,11,12,7,7        ]
[5,10,10,12,8,11,9,7,8,9,5,12,6,7,6         ]
[5,10,12,6,5,12,8,9,7,6,7,8,11,11,9         ]
[5,13,15,15,14,8,6,7,16,8,7,13,14,5,16      ]
[9,10,13,10,11,15,15,9,16,12,14,13,16,14,11 ]
[9,11,12,15,12,9,13,13,11,14,10,16,15,14,16 ]
[9,12,10,15,13,14,9,14,15,11,11,13,12,16,10 ]
];

%for each block

for group = 1:64,
    seq = ssc_seq(group,:);
    for shift = 0:40 %try all 15 shifts
        test_slot = slot_sample + shift*2560;
        %sum over all the SSCs in the block
        scorr(group,shift+1) = 0;
        for slot=0:14
            scorr(group,shift+1) = scorr(group,shift+1)+ abs(sum((Cssc(seq(slot+1),1:256) .* conj(cv_usrp(test_slot+2560*slot:test_slot+255+2560*slot))))).^2;
        end
    end
end
   

%guess the primary scrambling code group

psc_group = find (max(scorr') == max(max(scorr')));
slot_offset = find (scorr(psc_group,:) == max(max(scorr')));


%antenna 0 CPICH pattern is 00.....
%antenna 1 CPICH pattern is 0011 1100 0011.... (even slot) 1100 0011. (odd)

%CPICH channelization code in both cases is C{256,0} which is 111....

%therefore, since ch code, is unity, the CPICH pattern is directly
%chipped by scrambling code

%00 modulates to QPSK (+1+1j, 11 modulates to QPSK (-1-1j)

seq1 = commsrc.pn('genpoly', [18 7 0]);
seq2 = commsrc.pn('genpoly', [18 10 7 5 0], 'InitialStates', ones(1,18));

% reg = zeros(1,18);
% reg(18) = 1;
% for i = 1:100,
%     jqout2(i) = reg(18);
%     bit = mod(reg(18)  + reg(13) + reg(11) + reg(8),2);
%     reg(2:18) = reg(1:17);
%     reg(1) = bit;
%     
% end

seq1.reset
seq2.reset

seq1.NumBitsOut = 2^18 - 1;
seq2.NumBitsOut = 2^18 - 1;

x = seq1.generate';
y = seq2.generate';

%n'th gold seq
n = 16*417;
%no need to do modulo operation as all the codes used will never wrap
xn_lower = x(1+n:38400+n);

zn_real = mod(xn_lower + y(1:38400), 2);

xn_upper = x(1+n+131072:38400+n+131072);

zn_imag = mod(xn_upper + y(1+131072:38400+131072),2);

Sn = (1-2*zn_real) + (1-2*zn_imag)*1i;


scramb_corr = zeros(1,N_corr_samples);

fprintf(1,'Correlating CPICH...\n');

 for (i=1:N_corr_samples)
     scramb_corr(i) = sum( conj(Sn(1:512) .* (1+1i)) .* cv_usrp(i:i+511) );
     if (mod(i,10*38400) == 1)
         fprintf(1,'*');
     end
 end
 

 
 figure(2)
 plot([1:N_corr_samples], abs(scramb_corr));


 
% base=1;
% xalt = zeros(1,2^18-1);
% yalt = zeros(1,2^18-1);
% 
% xalt(base+0) = 1;
% xalt(base+1:base+17) = 0;
% 
% yalt(base+0:base+17) = 1;
% 
% for i=0:2^18-20
%     xalt(base+i+18) = mod(xalt(base+i+7) + xalt(base+i),2);
%     yalt(base+i+18) = mod(yalt(base+i+10) + yalt(base+i+7) + yalt(base+i+5) + yalt(base+i),2);
% end

%strong correlation at sample 55089

%descramle

%slot sync is at 16689       55089       93489      131889      170289

%slot_syncs = [16689       55089       93489      131889      170289  208689      247089          285489];

 slot_syncs =  [       18045       56445       94845      133245      171645      210044      248444 ...
      286844      325244      363644      402044      440444      478844      517243 ...
      555643      594043      632443      670843      709243      747643      786043 ...
      824442      862842      901242      939642      978042     1016442     1054842 ...
     1093242     1131642     1170041     1208441     1246841     1285241     1323641 ...
     1362041     1400441     1438841     1477240     1515640     1554040     1592440 ...
     1630840     1669240     1707640     1746040     1784440     1822839     1861239 ...
     1899639     1938039     1976439     2014839     2053239     2091639     2130038 ...
     2168438     2206838     2245238     2283638     2322038     2360438     2398838 ...
     2437238     2475638     2514037     2552437     2590837     2629237     2667637 ...
     2706037     2744437     2782836     2821236     2859636     2898036     2936436 ...
     2974836     3013236     3051636     3090036     3128435     3166835     3205235 ...
     3243635     3282035     3320435     3358835     3397235     3435635     3474035 ...
     3512434     3550834     3589234     3627634     3666034     3704434     3742834 ...
     3781234     3819634     3858033     3896433     3934833     3973233     4011633 ...
     4050033     4088433     4126833     4165232     4203632     4242032     4280432 ...
     4318832     4357232     4395632     4434032     4472432     4510831     4549231 ...
     4587631     4626031     4664431     4702831     4741231     4779631     4818031 ...
     4856430     4894830     4933230     4971630     5010030     5048430     5086830 ...
     5125230     5163628     5202029     5240429     5278829     5317229     5355629 ...
     5394029     5432429     5470829     5509228     5547628     5586028     5624428 ...
     5662828     5701228     5739628     5778028     5816428     5854827     5893227 ...
     5931627     5970027     6008427     6046827     6085227     6123627     6162026 ...
     6200426     6238826     6277226     6315626     6354026     6392426     6430826 ...
     6469226     6507626     6546025     6584425     6622825     6661225     6699625 ...
     6738025     6776425     6814825     6853225     6891624     6930024     6968424 ...
     7006824     7045224     7083624     7122024     7160424     7198823     7237223 ...
     7275623     7314023     7352423     7390823     7429223     7467623     7506023 ...
     7544422     7582822     7621222     7659622     7698022     7736422     7774822 ...
     7813222     7851621     7890021     7928421     7966821     8005221     8043621 ...
     8082021     8120421     8158820     8197220     8235620     8274020     8312420 ...
     8350820     8389220     8427620     8466020     8504419     8542819     8581219 ...
     8619619     8658019     8696419     8734819     8773219     8811617     8850018 ...
     8888418     8926818     8965218     9003618     9042018     9080418     9118816 ...
     9157216     9195617     9234017     9272417     9310817     9349217     9387617 ...
     9426017     9464417     9502816     9541215     9579616     9618016     9656416     9694816 ...
     9733216     9771614     9810014     9848414     9886814     9925215     9963615 ...
    10002015    10040413    10078815    10117213    10155614    10194014    10232414 ...
    10270814    10309214    10347614    10386014    10424414    10462812    10501212 ...
    10539613    10578013    10616413    10654813    10693213    10731613    10770013 ...
    10808411    10846812    10885212    10923612    10962012    11000412    11038812 ...
    11077212    11115611    11154011    11192411    11230811    11269211    11307611 ...
    11346011    11384411    11422811    11461211                             ];
 
%  slot_syncs =  [ ...
%        23691       62091      100491      138890      177290      215690      254090 ...
%       292489      330889      369289      407689      446089      484489      522888 ...
%       561288      599688      638088      676488      714887      753287      791687 ...
%       830087      868487      906886      945286      983686     1022086     1060486 ...
%      1098885     1137285     1175685     1214085     1252485     1290884     1329284 ...
%      1367684     1406084     1444484     1482884     1521283     1559683     1598083 ...
%      1636483     1674883     1713283     1751682     1790082     1828482     1866882 ...
%      1905281     1943681     1982081     2020481     2058881     2097280     2135680 ...
%      2174080     2212480     2250880     2289279     2327679     2366079     2404479 ...
%      2442879     2481278     2519678     2558078     2596478     2634878     2673277 ...
%      2711677     2750077     2788477     2826877     2865276     2903676     2942076 ...
%      2980476     3018876     3057275     3095675     3134075     3172475     3210875 ...
%      3249274     3287674     3326074     3364474     3402874     3441273     3479673 ...
%      3518073     3556473     3594873     3633272     3671672     3710072     3748472 ...
%      3786872     3825271     3863671     3902071     3940471     3978871     4017270 ...
%      4055670     4094070     4132470     4170870     4209269     4247669     4286069 ...
%      4324469     4362869     4401268     4439668     4478068     4516468     4554868 ...
%      4593268     4631667     4670067     4708467     4746867     4785267     4823666 ...
%      4862066     4900466     4938866     4977266     5015665     5054065     5092465 ...
%      5130865     5169265     5207664     5246064     5284464     5322864     5361264 ...
%      5399663     5438063     5476463     5514863     5553263     5591662     5630062 ...
%      5668462     5706862     5745262     5783661     5822061     5860461     5898861 ...
%      5937261     5975661     6014060     6052460     6090860     6129260     6167660 ...
%      6206059     6244459     6282859     6321259     6359659     6398059     6436458 ...
%      6474858     6513258     6551658     6590057     6628457     6666857     6705257 ...
%      6743657     6782056     6820456     6858856     6897256     6935656     6974055 ...
%      7012455     7050855     7089255     7127655     7166054     7204454     7242854 ...
%      7281254     7319654     7358054     7396453     7434853     7473253     7511653 ...
%      7550053     7588452     7626852     7665252     7703652     7742052     7780452 ...
%      7818851     7857251     7895651     7934051     7972450     8010850     8049250 ...
%      8087650     8126050     8164450     8202849     8241249     8279649     8318049 ...
%      8356448     8394848     8433248     8471648     8510048     8548448     8586848 ...
%      8625247     8663647     8702047     8740447     8778847     8817247     8855646 ...
%      8894046     8932446     8970845     9009246     9047645     9086045     9124445 ...
%      9162845     9201245     9239644     9278044     9316444     9354844     9393243 ...
%      9431643     9470043     9508443     9546843     9585242     9623642     9662042 ...
%      9700442     9738842     9777241     9815641     9854041     9892441     9930841 ...
%      9969240    10007640    10046040    10084440    10122840    10161239    10199639 10238039 ...
%     10276439    10314839    10353238    10391638    10430038    10468438    10506838 ...
%     10545237    10583637    10622037    10660437    10698837    10737237    10775636 ...
%     10814036    10852436    10890836    10929236    10967635    11006035    11044435 ...
%     11082835    11121234    11159634    11198034    11236434    11274834    11313233 ...
%     11351633    11390033    11428433    11466833    ]%11505233 ]

for frame =1:length(slot_syncs)
    

    frame_scrambled = cv_usrp(slot_syncs(frame)+0:slot_syncs(frame)+0+38399);

    frame_out = frame_scrambled .* conj(Sn);

    %despread the CPICH

    SF_256_0 = ones(1,256);
    SF_256_1 = [ones(1,128) -ones(1,128)];

    Nsymbols = length(frame_out) / length(SF_256_0);

    symbols_out = zeros(1,Nsymbols);
    SF = length(SF_256_0);

    for i=1:150,
        %I and Q branches are spread using same code
        symbols_out_CPICH(frame,i) = sum(frame_out(1+(i-1)*SF:SF+(i-1)*SF) .* SF_256_0);
        symbols_out_CCPCH(frame,i) = sum(frame_out(1+(i-1)*SF:SF+(i-1)*SF) .* SF_256_1);
    end

end

%estimate the frequency offset by partially correlation CPICH
%CPICH in STTD mode varies every symbol (256-chips) due to STTD pattern
%therefore, look at the phase different in every pair of (128,128)chips

N_freq_est_slots = 120;
T_freq_est_start_symbol = slot_syncs(1);


for i=1:N_freq_est_slots
    first_half(i) = sum(cv_usrp(T_freq_est_start_symbol+(i-1)*2560:T_freq_est_start_symbol+127+(i-1)*2560) .* conj(Cpsc(1:128)));
    second_half(i) = sum(cv_usrp(T_freq_est_start_symbol+128+(i-1)*2560:T_freq_est_start_symbol+255+(i-1)*2560) .* conj(Cpsc(129:256)));
end

%P-CCPCH demod histogram
figure(5)
hist(diff(angle(symbols_out_CCPCH ./ symbols_out_CPICH))/(pi/2), 100)

%estimate modulation of the PSC

  %  angle(corr(slot_syncs))
  %  angle(scramb_corr(slot_syncs))

%reference (non STTD) CPICH is modulated with (1,1) = 1+j. Therefore, to get absolute phase, rotate phase by +angle(1+j) = pi/4     

%estimate phase

%figure(10)
plot([1:150], angle(symbols_out_CPICH(1,:)))


offset = 0; % can be 1, for odd BCH

for (i=offset:2:size(symbols_out_CPICH,1)-1-1)

    CCPCH_symbols_corrected = ((symbols_out_CCPCH ./ symbols_out_CPICH)) * exp(j*pi/4);



    CCPCH_symbols_corrected_stripped_0 = umts_extract_pccpch_frame(CCPCH_symbols_corrected(i+1,:));
    CCPCH_symbols_corrected_stripped_1 = umts_extract_pccpch_frame(CCPCH_symbols_corrected(i+2,:));



    figure(3)
     plot(real(CCPCH_symbols_corrected_stripped_0), imag(CCPCH_symbols_corrected_stripped_0), '+')


    figure(4)
     plot(real(CCPCH_symbols_corrected_stripped_1), imag(CCPCH_symbols_corrected_stripped_1), '+')

     
     
    CCPCH_bits_frame_0 = umts_qpsk_demap(CCPCH_symbols_corrected_stripped_0);
    CCPCH_bits_frame_1 = umts_qpsk_demap(CCPCH_symbols_corrected_stripped_1);

    CCPCH_bits_frame_2nddeint_0 = umts_2nd_deinterleave(CCPCH_bits_frame_0);
    CCPCH_bits_frame_2nddeint_1 = umts_2nd_deinterleave(CCPCH_bits_frame_1);

    trellis = poly2trellis([9], [561 753]);

    merged = zeros(1,length(CCPCH_bits_frame_2nddeint_0)*2);

    merged(1:2:end) = CCPCH_bits_frame_2nddeint_0;
    merged(2:2:end) = CCPCH_bits_frame_2nddeint_1;

    decoded = vitdec(merged,trellis, 70, 'term', 'hard');
    encoded = umts_conv_encode(decoded); 

    crcpoly=[1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 1];

    crc = umts_crc(decoded(1:246), crcpoly);
    if (sum(abs(crc - decoded(247:247+15))) == 0)
        fprintf(1, 'CRC matches\n');
    else
        fprintf(1, 'CRC error!\n');    
    end
    fprintf(1, 'bit errors = %d\n', sum(abs(encoded - merged)));
    
    fname = sprintf('C:\\temp\\umts\\bch%03d.bin', floor(i/2));
    umts_write_bitstring_file(fname, decoded(1:246));
end
 %correlate the half-PSCs
 
 % d
