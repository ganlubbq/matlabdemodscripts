function [slot0_out slot1_out] = lte_insert_prbs(slot0,slot1, PB, prb_symbols, NDLRB, prblist, ncellid, ns, ncp, numtxantennas, control_symbols)

    if (ncp), maxsymbols = 14; slotsymbols=7; else maxsymbols = 12; slotsymbols = 6; end;

    %PB - adjust the relative power between non reference and reference
    %symbols as per PB parameter. The input symbols should be scaled to the
    %desired power in REFERENCE symbols
    
%     PA=non ref signal symbols
%     PB=ref signal symbols

    PB_tab = [1 4/5 3/5 2/5 ; 5/4 1 3/4 1/2 ; 5/4 1 3/4 1/2 ; 5/4 1 3/4 1/2 ];
    
    pb_pa = PB_tab(numtxantennas+1, PB+1);
    pb_pa_sqrt = sqrt(
    
    %combine into linear subframe
    subframe = [slot0; slot1]; %becomes 14x1320
    subframe = subframe(:,1320/2-NDLRB*12/2+1:1320/2+NDLRB*12/2); %cut out the RBs of interest
    subframe = reshape(subframe.', 1, maxsymbols*NDLRB*12); %reshape to linear
    
    %produce a list of all the REs in the non control region
    REs = [];
    for symbol = control_symbols:maxsymbols-1,
        for prb=0:length(prblist)-1,
            REs = [REs (symbol*NDLRB*12+12*prblist(prb+1) + [0:11])];
        end
    end
    
    exclREs = [];
    %exclusions
    if (ns == 0 || ns == 10) %SSS,PSS
        exclREs = [exclREs (slotsymbols-2) * NDLRB*12 + ((NDLRB/2-3) * 12 + [0:71])  ];
        exclREs = [exclREs (slotsymbols-1) * NDLRB*12 + ((NDLRB/2-3) * 12 + [0:71])  ];
    end
    if (ns == 0) %PBCH
        exclREs = [exclREs (slotsymbols)   * NDLRB*12 + ((NDLRB/2-3) * 12 + [0:71])  ];
        exclREs = [exclREs (slotsymbols+1) * NDLRB*12 + ((NDLRB/2-3) * 12 + [0:71])  ];
        exclREs = [exclREs (slotsymbols+2) * NDLRB*12 + ((NDLRB/2-3) * 12 + [0:71])  ];
        exclREs = [exclREs (slotsymbols+3) * NDLRB*12 + ((NDLRB/2-3) * 12 + [0:71])  ];
    end
    
    vshift = mod(ncellid, 6);
    vshift2 = mod(ncellid, 3);
    nonref_symbols = [];
    
    for symbol = control_symbols:maxsymbols-1,
 
        if (lte_symbol_is_reference(mod(symbol, slotsymbols), ncp, numtxantennas))  
            
            if (numtxantennas == 1)
                %offset antennas in the alternate symbols
                v = (mod(symbol, slotsymbols)>0) * 3;
                vmod = mod(v + vshift,6);
                exclREs = [exclREs (symbol*NDLRB*12 + (vmod:6:(NDLRB*12-1)))];
            else %must always be 2 antenna ref signals in a ref sig slot
                exclREs = [exclREs (symbol*NDLRB*12 + (vshift2:3:(NDLRB*12-1)))];
            end
        else
            nonref_symbols = [nonref_symbols symbol];
        end
    end         
        
    REs = setdiff_ns(REs, exclREs);
    
    RE_symbols_idxs = floor(REs/(NDLRB*12))

    %bitmap of all  REs - and hence 1:1 with input symbols that are PB
    %symbols, i.e. with different power
    
    PB_map = ismember(RE_symbols_idxs,nonref_symbols)
    
    prb_symbols = prb_symbols .* PB_map ./ pb_pa_sq; %divide the PB power by PB/PA (i.e. PA.PB/PB =PA) to get PA power
    
    
    subframe(REs+1) = prb_symbols;
    %now pull the subframe back - REs are in sequential order - k, then l
    subframe_hv = reshape(subframe.',NDLRB*12,maxsymbols).'; %back into a vector, but not full 1320
    subframe_dkv = zeros(maxsymbols, 1320);
    subframe_dkv(:,1320/2-NDLRB*12/2+1:1320/2+NDLRB*12/2) = subframe_hv;
    slot0_out = subframe_dkv(1:slotsymbols,:);
    slot1_out = subframe_dkv(slotsymbols+1:2*slotsymbols,:);

    
end

